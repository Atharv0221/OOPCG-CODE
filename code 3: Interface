#include <iostream>
#include <string>
using namespace std;

// Abstract class as Interface
class Vehicle {
public:
    virtual void start() = 0;
    virtual void stop() = 0;
    virtual void accelerate() = 0;
    virtual void brake() = 0;
    virtual void displayInfo() = 0;
    virtual ~Vehicle() {}
};

// Car class implementing Vehicle interface
class Car : public Vehicle {
private:
    string model;
    int speed;
    bool engineOn;

public:
    Car(string m) : model(m), speed(0), engineOn(false) {}

    void start() override {
        if (!engineOn) {
            engineOn = true;
            cout << model << " engine started.\n";
        } else {
            cout << "Engine already running.\n";
        }
    }

    void stop() override {
        if (engineOn) {
            engineOn = false;
            speed = 0;
            cout << model << " engine stopped.\n";
        } else {
            cout << "Engine already off.\n";
        }
    }

    void accelerate() override {
        if (engineOn) {
            speed += 20;
            cout << model << " accelerating... Speed: " << speed << " km/h\n";
        } else {
            cout << "Cannot accelerate. Engine is off!\n";
        }
    }

    void brake() override {
        if (speed > 0) {
            speed -= 10;
            if (speed < 0) speed = 0;
            cout << model << " braking... Speed: " << speed << " km/h\n";
        } else {
            cout << "Car already stopped.\n";
        }
    }

    void displayInfo() override {
        cout << "\n=== CAR INFORMATION ===\n";
        cout << "Model: " << model << endl;
        cout << "Speed: " << speed << " km/h" << endl;
        cout << "Engine: " << (engineOn ? "ON" : "OFF") << endl;
        cout << "=======================\n";
    }
};

// Bike class implementing Vehicle interface
class Bike : public Vehicle {
private:
    string brand;
    int speed;
    bool engineOn;

public:
    Bike(string b) : brand(b), speed(0), engineOn(false) {}

    void start() override {
        if (!engineOn) {
            engineOn = true;
            cout << brand << " bike started.\n";
        } else {
            cout << "Bike already started.\n";
        }
    }

    void stop() override {
        if (engineOn) {
            engineOn = false;
            speed = 0;
            cout << brand << " bike stopped.\n";
        } else {
            cout << "Bike is already off.\n";
        }
    }

    void accelerate() override {
        if (engineOn) {
            speed += 15;
            cout << brand << " accelerating... Speed: " << speed << " km/h\n";
        } else {
            cout << "Cannot accelerate. Engine is off!\n";
        }
    }

    void brake() override {
        if (speed > 0) {
            speed -= 5;
            if (speed < 0) speed = 0;
            cout << brand << " braking... Speed: " << speed << " km/h\n";
        } else {
            cout << "Bike is already stopped.\n";
        }
    }

    void displayInfo() override {
        cout << "\n=== BIKE INFORMATION ===\n";
        cout << "Brand: " << brand << endl;
        cout << "Speed: " << speed << " km/h" << endl;
        cout << "Engine: " << (engineOn ? "ON" : "OFF") << endl;
        cout << "========================\n";
    }
};

// Main menu-driven function
int main() {
    int choice, vehicleType;
    Vehicle* vehicle = nullptr;

    cout << "==============================\n";
    cout << "   VEHICLE INTERFACE DEMO\n";
    cout << "==============================\n";
    cout << "Select Vehicle Type:\n";
    cout << "1. Car\n2. Bike\n";
    cout << "Enter choice: ";
    cin >> vehicleType;

    if (vehicleType == 1) {
        string model;
        cout << "Enter Car Model: ";
        cin >> model;
        vehicle = new Car(model);
    } else if (vehicleType == 2) {
        string brand;
        cout << "Enter Bike Brand: ";
        cin >> brand;
        vehicle = new Bike(brand);
    } else {
        cout << "Invalid vehicle type!\n";
        return 0;
    }

    do {
        cout << "\n========== MENU ==========\n";
        cout << "1. Start Vehicle\n";
        cout << "2. Stop Vehicle\n";
        cout << "3. Accelerate\n";
        cout << "4. Brake\n";
        cout << "5. Display Info\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: vehicle->start(); break;
            case 2: vehicle->stop(); break;
            case 3: vehicle->accelerate(); break;
            case 4: vehicle->brake(); break;
            case 5: vehicle->displayInfo(); break;
            case 6: cout << "Exiting program...\n"; break;
            default: cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 6);

    delete vehicle; // Clean up memory
    return 0;
}
